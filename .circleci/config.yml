# multi-stage docker build that first starts off with the actual build, with both running two containers in parallel:
# build:
# implements conditional logic to check which branch is currently being integrated and will echo the branch; functionally, this doesn't do much,
# but i understand how this could facilitate more automated builds and deployments with additional parameters
# caches are first attempted to be restored in the build, then saved if there are changes after the prior run

version: 2.1
jobs:
  build:
    parallelism: 2
    docker:
      - image: cimg/node:17.0.1
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - when:
          condition:
            equal: [main, << pipeline.git.branch >>]
          steps:
            - run: echo "on main"
      - when:
          condition:
            equal: [staging, << pipeline.git.branch >>]
          steps:
            - run: echo "on staging"

      - restore_cache:
          keys:
            - v2-jalex-circleci-deps-{{ checksum "package-lock.json" }}
            - v2-jalex-circleci-deps-
      - run:
          command: |
            npm install
            mkdir ./test-results

      - save_cache:
          key: v2-jalex-circleci-deps-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
  # test:
  # runs two containers in parallel and attempts to restore the cache from the required - build: in the workflow
  # two test suites are split into two different files which are both run and output to the same path/directory via jest junit
  # these are then saved as artifacts and can be seen in the artifacts tab in the circleci dashboard
  test:
    parallelism: 2
    docker:
      - image: cimg/node:17.0.1
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-jalex-circleci-deps-{{ checksum "package-lock.json" }}
            - v2-jalex-circleci-deps-
      - run:
          environment:
            TEST: circleci tests glob **/__tests__/*.js | circleci tests split
            JEST_JUNIT_OUTPUT_DIR: ./test-results/
          command: |
            echo $TEST
            npm run test:ci

      - store_artifacts:
          path: ./test-results/junit.xml
          destination: ./test-results
      - store_test_results:
          path: ./test-results/junit.xml

workflows:
  version: 2
  build-and-test:
    jobs:
      - build
      - test:
          requires:
            - build
